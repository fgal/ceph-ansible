- name: creates logical volumes for the bucket index or fs journals on a single device. 
  become: true
  hosts: osds

  vars:
    logfile: |
      # Suggested cut and paste under "lvm_volumes:" in "group_vars/osds.yml" for configuring with osd_scenario=lvm
      # -----------------------------------------------------------------------------------------------------------
      # {{ ansible_hostname }}
      lvm_volumes:
      {% for ssd in ssd_devices %}
        - data: {{ ssd_lv_prefix }}-{{ ssd.split('/')[-1] }}
          data_vg: {{ ssd_vg_prefix }}-{{ ssd.split('/')[-1] }}
      {% endfor %}
      {% for hdd in hdd_devices %}
        - data: {{ hdd_lv_prefix }}-{{ hdd.split('/')[-1] }}
          data_vg: {{ hdd_vg_prefix }}-{{ hdd.split('/')[-1] }}
          db: {{ rocks_lvs[ loop.index - 1 ].split('-=-')[-1] }}
          db_vg: {{ rocks_lvs[ loop.index - 1 ].split('-=-')[-2] }}
      {% endfor %}

  tasks:
  - name: check existence of vars file lv_vars.yaml_{{ ansible_hostname }}
    stat:
      path: "{{ playbook_dir }}/vars/lv_vars.yaml_{{ ansible_hostname }}"
    register: stat_vars_hostname
    delegate_to: localhost
  - name: include vars of lv_vars.yaml_{{ ansible_hostname }}
    include_vars:
      file: "lv_vars.yaml_{{ ansible_hostname }}"
    failed_when: false
    when: stat_vars_hostname.stat.exists
  - name: include vars of lv_vars.yaml
    include_vars:
      file: lv_vars.yaml
    failed_when: false
    when: not stat_vars_hostname.stat.exists

#  - name: create new list
#    set_fact:
#      hdd_devices_new: "{{ hdd_devices_new | default([]) + [ rocksdb_hdd_devices[item|int % rocksdb_hdd_devices|length ] ] }}"
#    with_sequence: start=0 end={{ hdd_devices|length - 1}}
#  - debug: var=hdd_devices|length
#  - debug: var=hdd_devices_new

  - name: create new ROCKS list
    set_fact:
      rocks_lvs: "{{ rocks_lvs | default([]) + [ '-'.join(( 
            rocksdb_hdd_devices[item|int % rocksdb_hdd_devices|length], '=',
            rocks_vg_prefix , 
            rocksdb_hdd_devices[item|int % rocksdb_hdd_devices|length].split('/')[-1] ,
            '=' , rocks_lv_prefix , 
            rocksdb_hdd_devices[item|int % rocksdb_hdd_devices|length].split('/')[-1] ,
            hdd_devices[item|int].split('/')[-1] )) ] }}"
    with_sequence: start=0 end={{ hdd_devices|length - 1}}

  - debug: var=rocks_lvs


  # need to check if lvm2 is installed
  - name: install lvm2
    package:
      name: lvm2
      state: present
    register: result
    until: result is succeeded


  # Make sure all HDD devices have a unique volume group
  - name: create vgs for all hdd devices
    lvg:
      force: yes
      pvs: "{{ item }}"
      pesize: 4
      state: present
      vg: "{{ hdd_vg_prefix }}-{{ item.split('/')[-1] }}"
    with_items: "{{ hdd_devices }}"
  - name: create lvs for the data portion on HDD devices
    lvol:
      lv: "{{ hdd_lv_prefix }}-{{ item.split('/')[-1] }}"
      vg: "{{ hdd_vg_prefix }}-{{ item.split('/')[-1] }}"
      size: "{{ hdd_lv_size }}"
      pvs: "{{ item }}"
      state: present
      shrink: false
    with_items: "{{ hdd_devices }}"


  # Make sure all SSD devices have a unique volume group
  - name: create vgs for all SSD devices
    lvg:
      force: yes
      pvs: "{{ item }}"
      pesize: 4
      state: present
      vg: "{{ ssd_vg_prefix }}-{{ item.split('/')[-1] }}"
    with_items: "{{ ssd_devices }}"
  - name: create lvs for the data portion on SSD devices
    lvol:
      lv: "{{ ssd_lv_prefix }}-{{ item.split('/')[-1] }}"
      vg: "{{ ssd_vg_prefix }}-{{ item.split('/')[-1] }}"
      size: "{{ ssd_lv_size }}"
      pvs: "{{ item }}"
      state: present
      shrink: false
    with_items: "{{ ssd_devices }}"

  # Make sure all ROCKS devices have a unique volume group
  - name: create vgs for all ROCKS devices
    lvg:
      force: yes
      pvs: "{{ item.split('-=-')[0] }}"
      pesize: 4
      state: present
      vg: "{{ item.split('-=-')[-2] }}"
    with_items: "{{ rocks_lvs }}"
  - name: create lvs for the data portion on ROCKS devices
    lvol:
      lv: "{{ item.split('-=-')[-1] }}"
      vg: "{{ item.split('-=-')[-2] }}"
      size: "{{ rocksdb_size }}"
      state: present
      shrink: false
    with_items: "{{ rocks_lvs }}"


  - name: "write output for osds.yml to {{ logfile_path }}_{{ ansible_hostname }}"
    become: false
    copy:
      content: "{{ logfile }}"
      dest: "{{ logfile_path }}_{{ ansible_hostname }}"
    delegate_to: localhost
