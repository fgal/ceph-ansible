---
# NOTE (leseb) : this task is for disk devices only because of the explicit use of the first
# partition.

- name: automatically activate osd disk(s) without partitions
  command: ceph-disk activate "/dev/{{ item.key | regex_replace('^(\/dev\/cciss\/c[0-9]{1}d[0-9]{1})$', '\\1p') }}1"
  ignore_errors: true
  with_dict: "{{ ansible_devices }}"
  when:
    - ansible_devices is defined
    - item.value.removable == "0"
    - item.value.partitions|count == 0
    - item.value.holders|count == 0
    - journal_collocation
    - osd_auto_discovery

- debug: "msg='journal_collocation is {{ journal_collocation }}'"
- debug: "msg='osd_auto_discovery  is {{ osd_auto_discovery }}'"
- debug: "msg='raw_multi_journal   is {{ raw_multi_journal }}'"

- name: activate osd(s) when device is a disk
  command: ceph-disk activate "{{ item }}{%- if 'nvme' in item or 'cciss' in item or 'loop' in item %}{{ 'p' }}{%- endif %}{%- if 'mpath' in item %}{{ '-part' }}{%- endif %}{{ '1' }}"
  with_items:
    - "{{ devices|unique }}"
  changed_when: false
  register: activate_osd_disk
  when:
    - not osd_auto_discovery
    - not dmcrypt
    - item != '/dev/dead'
    - not devices_multipath_auto
#FG#

- name: activate osd(s) when device is a disk (dmcrypt)
  command: ceph-disk activate --dmcrypt "{{ item }}{%- if 'nvme' in item or 'cciss' in item or 'loop' in item %}{{ 'p' }}{%- endif %}{%- if 'mpath' in item %}{{ '-part' }}{%- endif %}{{ '1' }}"
  with_items:
    - "{{ devices|unique }}"
  changed_when: false
  register: activate_osd_disk_dmcrypt
  when:
    - not osd_auto_discovery
    - dmcrypt
    - item != '/dev/dead'
    - not devices_multipath_auto
#FG#

# NOTE (leseb): we must do this because of
# https://github.com/ansible/ansible/issues/4297
- name: set_fact combined_activate_osd_disk_results
  set_fact:
    combined_activate_osd_disk_results: "{{ activate_osd_disk if osd_scenario != 'collocated' else activate_osd_disk_dmcrypt }}"

- name: fail if ceph-disk cannot create an OSD
  fail:
    msg: "ceph-disk failed to create an OSD"
  when:
    " 'ceph-disk: Error: ceph osd create failed' in item.get('stderr', '') "
  with_items: "{{ (combined_activate_osd_disk_results|default({})).results|default([]) }}"

#FG: Activate partition when device is multipath: allow for both "p1" or "1" on partition names
- name: find out what partition was created for each device (/dev/mapper/ case), assume ceph ends with '1'
  shell: "ls -1 {{ item }}* | grep {{ item }} | grep 1$ "
  register: devices_ceph_partition
  with_items:
    - "{{ devices|unique }}"
  when:
    - not osd_auto_discovery

- debug: "msg='devices_ceph_partition is {{ devices_ceph_partition }}'"
- debug: var=devices_ceph_partition.results
- debug: var=crush_location
- debug: var=item.stdout
  with_items:
    - "{{ devices_ceph_partition.results }}"
  when:
    - not osd_auto_discovery

- name: activate osd(s) when device is a /dev/mapper/ partition
  command: "ceph-disk activate {{ item.stdout }}"
  with_items:
    - "{{ devices_ceph_partition.results }}"
  changed_when: false
  failed_when: false
  when:
    - not osd_auto_discovery
